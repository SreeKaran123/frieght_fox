# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFqU5TTb9byt9Qn7IIhXsaI9FhpQE_x5
"""

import requests
import csv
import psycopg2
from datetime import datetime
import argparse
from bs4 import BeautifulSoup

# parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument('--commodity', type=str, required=True, help='Commodity to scrape')
parser.add_argument('--start_date', type=str, required=True, help='Start date in YYYY-MM-DD format')
parser.add_argument('--end_date', type=str, required=True, help='End date in YYYY-MM-DD format')
parser.add_argument('--time_agg', type=str, choices=['daily', 'monthly'], required=True, help='Time aggregation level')
parser.add_argument('--states', type=str, required=True, help='Comma-separated list of states')
args = parser.parse_args()

# set up PostgreSQL connection
conn = psycopg2.connect(database="agriiq", user="postgres", password="admin", host="localhost", port="5432")
cur = conn.cursor()

# set up Google Sheets connection
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']


# set up agmarknet API parameters
commodity = args.commodity
start_date = datetime.strptime(args.start_date, '%Y-%m-%d').strftime('%d-%m-%Y')
end_date = datetime.strptime(args.end_date, '%Y-%m-%d').strftime('%d-%m-%Y')
time_agg = args.time_agg
states = args.states.split(',')

# define agmarknet API URL
url = f'https://agmarknet.gov.in/SearchCmmMkt.aspx?Tx_Commodity={commodity}&Tx_State={states[0]}&Tx_District=0&Tx_Market=0&DateFrom={start_date}&DateTo={end_date}&Fr_Date={start_date}&To_Date={end_date}&Tx_Trend=0&Tx_CommodityHead={commodity}&Tx_StateHead={states[0]}'

# scrape data from agmarknet API
response = requests.get(url)
# from response extract table data and convert to csv
soup = BeautifulSoup(response.text, 'html.parser')
table = soup.find('table')

headers = []
for th in table.find_all('th'):
    headers.append(th.text.strip())


rows = []
for tr in table.find_all('tr'):
    row = []
    for td in tr.find_all('td'):
        row.append(td.text.strip())
    if row:
        rows.append(row)



# upload data to PostgreSQL database
cur.execute("CREATE TABLE IF NOT EXISTS agmarket_monthly (state TEXT, district TEXT, market TEXT, commodity TEXT, variety TEXT, arrival INTEGER, unit TEXT, min_price NUMERIC, max_price NUMERIC, modal_price NUMERIC, date TEXT)")

for row in rows:
    
    if len(row) != 10:
        continue
    
    state = states[0]
    district = row[1]
    
    market = row[2]
    commodity = row[3]
    
    variety = row[4]
    arrival = 20
    unit = row[5]
    min_price = row[6]
    max_price = row[7]
    modal_price = row[8]
    date = datetime.strptime(row[9], '%d %b %Y').strftime('%Y-%m-%d')
    cur.execute("INSERT INTO agmarket_monthly (state, district, market, commodity, variety, arrival, unit, min_price, max_price, modal_price, date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", (state, district, market, commodity, variety, arrival, unit, min_price, max_price, modal_price, date))
    
    
    # Check the current state of the connection
    
    conn.commit()
    # check whether commit is successful
    
try:
    cur.execute("""
        SELECT state, commodity, modal_price
        FROM (
            SELECT state, commodity, modal_price,
                    ROW_NUMBER() OVER (PARTITION BY commodity ORDER BY modal_price DESC) AS rank
            FROM agmarket_monthly
            WHERE commodity IN ('Potato', 'Onion', 'Wheat', 'Tomato')
        ) AS t
        WHERE rank <= 5
        ORDER BY commodity, modal_price DESC;
    """)
    
    results = cur.fetchall()
    print("Top 5 states for each commodity:")
    for state, commodity, price in results:
        print(f"{state} - {commodity}: {price}")
except (psycopg2.DatabaseError, psycopg2.InterfaceError) as e:
    print(f"SQL error: {e}")


#IN TERMINAL PASTE THIS LINE
#python agri_scrape.py --commodity=1 --start_date=2020-01-01 --end_date=2021-04-12 --time_agg=monthly --states=HR

